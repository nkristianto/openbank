// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/openbank/openbank/v1/transaction/all.proto

package transactions

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	types "github.com/openbank/openbank/v1/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Type defines the type of a transaction.
type Type int32

const (
	Type_UnknownType Type = 0
	// Type_Credit is the value for a credit transaction.
	Type_Credit Type = 1
	// Type_Debit is the value for a debit transaction.
	Type_Debit Type = 2
)

var Type_name = map[int32]string{
	0: "UnknownType",
	1: "Credit",
	2: "Debit",
}

var Type_value = map[string]int32{
	"UnknownType": 0,
	"Credit":      1,
	"Debit":       2,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}

func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1bfcd2b6d09f78a1, []int{0}
}

// Status defines the status of a transaction.
type Status int32

const (
	Status_UnknownStatus Status = 0
	// Status_Success is the value for a successful transaction.
	Status_Success Status = 1
	// Status_Pending is the value for a pending transaction.
	Status_Pending Status = 2
	// Status_Rejected is the value for a rejected transaction.
	Status_Rejected Status = 3
)

var Status_name = map[int32]string{
	0: "UnknownStatus",
	1: "Success",
	2: "Pending",
	3: "Rejected",
}

var Status_value = map[string]int32{
	"UnknownStatus": 0,
	"Success":       1,
	"Pending":       2,
	"Rejected":      3,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1bfcd2b6d09f78a1, []int{1}
}

// TFAType is available type of TFA.
type TFAType int32

const (
	TFAType__ TFAType = 0
	// TFAType_SMS Message.
	TFAType_SMS TFAType = 1
	// TFAType_SAFEKEY Application.
	TFAType_SAFEKEY TFAType = 2
)

var TFAType_name = map[int32]string{
	0: "_",
	1: "SMS",
	2: "SAFEKEY",
}

var TFAType_value = map[string]int32{
	"_":       0,
	"SMS":     1,
	"SAFEKEY": 2,
}

func (x TFAType) String() string {
	return proto.EnumName(TFAType_name, int32(x))
}

func (TFAType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1bfcd2b6d09f78a1, []int{2}
}

// Transaction holds all details about a transaction.
type Transaction struct {
	// TransactionID is the unique identifier of a transaction.
	TransactionID string `protobuf:"bytes,1,opt,name=TransactionID,json=transaction_id,proto3" json:"TransactionID,omitempty"`
	// SourceAccount is the account emitting the transaction.
	SourceAccount *BankAccountInfo `protobuf:"bytes,2,opt,name=SourceAccount,json=source_account,proto3" json:"SourceAccount,omitempty"`
	// SourceOfflineUser is the contact information for an offline user.
	SourceOfflineUser *types.OfflineUserInfo `protobuf:"bytes,11,opt,name=SourceOfflineUser,json=source_offline_user,proto3" json:"SourceOfflineUser,omitempty"`
	// DestinationAccount is the account receiving the transaction.
	DestinationAccount *BankAccountInfo `protobuf:"bytes,3,opt,name=DestinationAccount,json=destination_account,proto3" json:"DestinationAccount,omitempty"`
	// DestinationOfflineUser is the contact information for an offline user.
	DestinationOfflineUser *types.OfflineUserInfo `protobuf:"bytes,12,opt,name=DestinationOfflineUser,json=destination_offline_user,proto3" json:"DestinationOfflineUser,omitempty"`
	// Date is the date of the transaction.
	Date *timestamp.Timestamp `protobuf:"bytes,4,opt,name=Date,json=date,proto3" json:"Date,omitempty"`
	// Type is the type of transaction.
	Type Type `protobuf:"varint,5,opt,name=Type,json=type,proto3,enum=transactions.Type" json:"Type,omitempty"`
	// Status is the status of the transaction.
	Status Status `protobuf:"varint,6,opt,name=Status,json=status,proto3,enum=transactions.Status" json:"Status,omitempty"`
	// Amount holds the amount value and currency of the transaction.
	Amount *types.Amount `protobuf:"bytes,7,opt,name=Amount,json=amount,proto3" json:"Amount,omitempty"`
	// Description describes the transaction.
	Description string `protobuf:"bytes,8,opt,name=Description,json=description,proto3" json:"Description,omitempty"`
	// UserID is the identifier of the issuer of the transaction.
	UserID string `protobuf:"bytes,9,opt,name=UserID,json=user_id,proto3" json:"UserID,omitempty"`
	// Remarks is an informational note about the transaction.
	Remarks              string   `protobuf:"bytes,10,opt,name=Remarks,json=remarks,proto3" json:"Remarks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bfcd2b6d09f78a1, []int{0}
}

func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetTransactionID() string {
	if m != nil {
		return m.TransactionID
	}
	return ""
}

func (m *Transaction) GetSourceAccount() *BankAccountInfo {
	if m != nil {
		return m.SourceAccount
	}
	return nil
}

func (m *Transaction) GetSourceOfflineUser() *types.OfflineUserInfo {
	if m != nil {
		return m.SourceOfflineUser
	}
	return nil
}

func (m *Transaction) GetDestinationAccount() *BankAccountInfo {
	if m != nil {
		return m.DestinationAccount
	}
	return nil
}

func (m *Transaction) GetDestinationOfflineUser() *types.OfflineUserInfo {
	if m != nil {
		return m.DestinationOfflineUser
	}
	return nil
}

func (m *Transaction) GetDate() *timestamp.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *Transaction) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_UnknownType
}

func (m *Transaction) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_UnknownStatus
}

func (m *Transaction) GetAmount() *types.Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *Transaction) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Transaction) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *Transaction) GetRemarks() string {
	if m != nil {
		return m.Remarks
	}
	return ""
}

// BankAccountInfo holds lightweight account information.
type BankAccountInfo struct {
	// AccountID is the identifier of the account.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"AccountID,omitempty"`
	// BankCode is code of the bank the account belongs to.
	BankCode string `protobuf:"bytes,2,opt,name=BankCode,json=bank_code,proto3" json:"BankCode,omitempty"`
	// OwnerName is the name of the owner of the account.
	OwnerName string `protobuf:"bytes,3,opt,name=OwnerName,json=owner_name,proto3" json:"OwnerName,omitempty"`
	// MajorType is the type of account.
	MajorType            types.MajorType `protobuf:"varint,4,opt,name=MajorType,json=major_type,proto3,enum=types.MajorType" json:"MajorType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *BankAccountInfo) Reset()         { *m = BankAccountInfo{} }
func (m *BankAccountInfo) String() string { return proto.CompactTextString(m) }
func (*BankAccountInfo) ProtoMessage()    {}
func (*BankAccountInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bfcd2b6d09f78a1, []int{1}
}

func (m *BankAccountInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BankAccountInfo.Unmarshal(m, b)
}
func (m *BankAccountInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BankAccountInfo.Marshal(b, m, deterministic)
}
func (m *BankAccountInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BankAccountInfo.Merge(m, src)
}
func (m *BankAccountInfo) XXX_Size() int {
	return xxx_messageInfo_BankAccountInfo.Size(m)
}
func (m *BankAccountInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BankAccountInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BankAccountInfo proto.InternalMessageInfo

func (m *BankAccountInfo) GetAccountID() string {
	if m != nil {
		return m.AccountID
	}
	return ""
}

func (m *BankAccountInfo) GetBankCode() string {
	if m != nil {
		return m.BankCode
	}
	return ""
}

func (m *BankAccountInfo) GetOwnerName() string {
	if m != nil {
		return m.OwnerName
	}
	return ""
}

func (m *BankAccountInfo) GetMajorType() types.MajorType {
	if m != nil {
		return m.MajorType
	}
	return types.MajorType_UnknownMajorType
}

// GetTransactionRequest is the request message to get an transaction by its identifier.
type GetTransactionRequest struct {
	// TransactionID is the unique identifier of a transaction.
	TransactionID        string   `protobuf:"bytes,1,opt,name=TransactionID,json=transaction_id,proto3" json:"TransactionID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTransactionRequest) Reset()         { *m = GetTransactionRequest{} }
func (m *GetTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*GetTransactionRequest) ProtoMessage()    {}
func (*GetTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bfcd2b6d09f78a1, []int{2}
}

func (m *GetTransactionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTransactionRequest.Unmarshal(m, b)
}
func (m *GetTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTransactionRequest.Marshal(b, m, deterministic)
}
func (m *GetTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransactionRequest.Merge(m, src)
}
func (m *GetTransactionRequest) XXX_Size() int {
	return xxx_messageInfo_GetTransactionRequest.Size(m)
}
func (m *GetTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransactionRequest proto.InternalMessageInfo

func (m *GetTransactionRequest) GetTransactionID() string {
	if m != nil {
		return m.TransactionID
	}
	return ""
}

// GetTransactionsRequest is the request message to get a list of transactions.
type GetTransactionsRequest struct {
	// FromDate is starting date to get the transactions.
	FromDate *timestamp.Timestamp `protobuf:"bytes,1,opt,name=FromDate,json=from_date,proto3" json:"FromDate,omitempty"`
	// ToDate is end date to get the transactions.
	ToDate *timestamp.Timestamp `protobuf:"bytes,2,opt,name=ToDate,json=to_date,proto3" json:"ToDate,omitempty"`
	// TransactionType is a type of transaction, debit or credit.
	TransactionType Type `protobuf:"varint,3,opt,name=TransactionType,json=transaction_type,proto3,enum=transactions.Type" json:"TransactionType,omitempty"`
	// Limit is number of search return of transactions.
	Limit string `protobuf:"bytes,4,opt,name=Limit,json=limit,proto3" json:"Limit,omitempty"`
	// NextStartingIndex is a cursor for pagination. It's a TransactionID that defines
	//the current place in the total list of Transaction.
	NextStartingIndex    string   `protobuf:"bytes,5,opt,name=NextStartingIndex,json=next_starting_index,proto3" json:"NextStartingIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTransactionsRequest) Reset()         { *m = GetTransactionsRequest{} }
func (m *GetTransactionsRequest) String() string { return proto.CompactTextString(m) }
func (*GetTransactionsRequest) ProtoMessage()    {}
func (*GetTransactionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bfcd2b6d09f78a1, []int{3}
}

func (m *GetTransactionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTransactionsRequest.Unmarshal(m, b)
}
func (m *GetTransactionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTransactionsRequest.Marshal(b, m, deterministic)
}
func (m *GetTransactionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransactionsRequest.Merge(m, src)
}
func (m *GetTransactionsRequest) XXX_Size() int {
	return xxx_messageInfo_GetTransactionsRequest.Size(m)
}
func (m *GetTransactionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransactionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransactionsRequest proto.InternalMessageInfo

func (m *GetTransactionsRequest) GetFromDate() *timestamp.Timestamp {
	if m != nil {
		return m.FromDate
	}
	return nil
}

func (m *GetTransactionsRequest) GetToDate() *timestamp.Timestamp {
	if m != nil {
		return m.ToDate
	}
	return nil
}

func (m *GetTransactionsRequest) GetTransactionType() Type {
	if m != nil {
		return m.TransactionType
	}
	return Type_UnknownType
}

func (m *GetTransactionsRequest) GetLimit() string {
	if m != nil {
		return m.Limit
	}
	return ""
}

func (m *GetTransactionsRequest) GetNextStartingIndex() string {
	if m != nil {
		return m.NextStartingIndex
	}
	return ""
}

// GetTransactionsResponse is the response message for retrieving a list of transactions.
type GetTransactionsResponse struct {
	// Result is a list containing up to 20 transactions.
	Result []*Transaction `protobuf:"bytes,1,rep,name=Result,json=result,proto3" json:"Result,omitempty"`
	// HasMore indicates if there are more transactions available.
	HasMore bool `protobuf:"varint,2,opt,name=HasMore,json=has_more,proto3" json:"HasMore,omitempty"`
	// LastRunningBalance is current balance for related account.
	LastRunningBalance   *types.Amount `protobuf:"bytes,3,opt,name=LastRunningBalance,json=last_running_balance,proto3" json:"LastRunningBalance,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetTransactionsResponse) Reset()         { *m = GetTransactionsResponse{} }
func (m *GetTransactionsResponse) String() string { return proto.CompactTextString(m) }
func (*GetTransactionsResponse) ProtoMessage()    {}
func (*GetTransactionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bfcd2b6d09f78a1, []int{4}
}

func (m *GetTransactionsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTransactionsResponse.Unmarshal(m, b)
}
func (m *GetTransactionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTransactionsResponse.Marshal(b, m, deterministic)
}
func (m *GetTransactionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransactionsResponse.Merge(m, src)
}
func (m *GetTransactionsResponse) XXX_Size() int {
	return xxx_messageInfo_GetTransactionsResponse.Size(m)
}
func (m *GetTransactionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransactionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransactionsResponse proto.InternalMessageInfo

func (m *GetTransactionsResponse) GetResult() []*Transaction {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *GetTransactionsResponse) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

func (m *GetTransactionsResponse) GetLastRunningBalance() *types.Amount {
	if m != nil {
		return m.LastRunningBalance
	}
	return nil
}

// GetTransactionsByAccountRequest is the request message to get a list of transactions.
type GetTransactionsByAccountRequest struct {
	// AccountID is the unique identifier of an account.
	AccountID string `protobuf:"bytes,1,opt,name=AccountID,json=account_id,proto3" json:"AccountID,omitempty"`
	// FromDate is starting date to get the transactions.
	FromDate *timestamp.Timestamp `protobuf:"bytes,2,opt,name=FromDate,json=from_date,proto3" json:"FromDate,omitempty"`
	// ToDate is end date to get the transactions.
	ToDate *timestamp.Timestamp `protobuf:"bytes,3,opt,name=ToDate,json=to_date,proto3" json:"ToDate,omitempty"`
	// TransactionType is a type of transaction, debit or credit.
	TransactionType Type `protobuf:"varint,4,opt,name=TransactionType,json=transaction_type,proto3,enum=transactions.Type" json:"TransactionType,omitempty"`
	// Limit is number of search return of transactions.
	Limit string `protobuf:"bytes,5,opt,name=Limit,json=limit,proto3" json:"Limit,omitempty"`
	// NextStartingIndex is a cursor for pagination. It's a TransactionID that defines
	//the current place in the total list of Transaction.
	NextStartingIndex    string   `protobuf:"bytes,6,opt,name=NextStartingIndex,json=next_starting_index,proto3" json:"NextStartingIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTransactionsByAccountRequest) Reset()         { *m = GetTransactionsByAccountRequest{} }
func (m *GetTransactionsByAccountRequest) String() string { return proto.CompactTextString(m) }
func (*GetTransactionsByAccountRequest) ProtoMessage()    {}
func (*GetTransactionsByAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bfcd2b6d09f78a1, []int{5}
}

func (m *GetTransactionsByAccountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTransactionsByAccountRequest.Unmarshal(m, b)
}
func (m *GetTransactionsByAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTransactionsByAccountRequest.Marshal(b, m, deterministic)
}
func (m *GetTransactionsByAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransactionsByAccountRequest.Merge(m, src)
}
func (m *GetTransactionsByAccountRequest) XXX_Size() int {
	return xxx_messageInfo_GetTransactionsByAccountRequest.Size(m)
}
func (m *GetTransactionsByAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransactionsByAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransactionsByAccountRequest proto.InternalMessageInfo

func (m *GetTransactionsByAccountRequest) GetAccountID() string {
	if m != nil {
		return m.AccountID
	}
	return ""
}

func (m *GetTransactionsByAccountRequest) GetFromDate() *timestamp.Timestamp {
	if m != nil {
		return m.FromDate
	}
	return nil
}

func (m *GetTransactionsByAccountRequest) GetToDate() *timestamp.Timestamp {
	if m != nil {
		return m.ToDate
	}
	return nil
}

func (m *GetTransactionsByAccountRequest) GetTransactionType() Type {
	if m != nil {
		return m.TransactionType
	}
	return Type_UnknownType
}

func (m *GetTransactionsByAccountRequest) GetLimit() string {
	if m != nil {
		return m.Limit
	}
	return ""
}

func (m *GetTransactionsByAccountRequest) GetNextStartingIndex() string {
	if m != nil {
		return m.NextStartingIndex
	}
	return ""
}

// GetTransactionsByAccountResponse is the response message for retrieving a list of transactions.
type GetTransactionsByAccountResponse struct {
	// Result is a list containing up to 20 transactions.
	Result []*Transaction `protobuf:"bytes,1,rep,name=Result,json=result,proto3" json:"Result,omitempty"`
	// HasMore indicates if there are more transactions available.
	HasMore bool `protobuf:"varint,2,opt,name=HasMore,json=has_more,proto3" json:"HasMore,omitempty"`
	// LastRunningBalance is current balance for related account.
	LastRunningBalance   *types.Amount `protobuf:"bytes,3,opt,name=LastRunningBalance,json=last_running_balance,proto3" json:"LastRunningBalance,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetTransactionsByAccountResponse) Reset()         { *m = GetTransactionsByAccountResponse{} }
func (m *GetTransactionsByAccountResponse) String() string { return proto.CompactTextString(m) }
func (*GetTransactionsByAccountResponse) ProtoMessage()    {}
func (*GetTransactionsByAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bfcd2b6d09f78a1, []int{6}
}

func (m *GetTransactionsByAccountResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTransactionsByAccountResponse.Unmarshal(m, b)
}
func (m *GetTransactionsByAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTransactionsByAccountResponse.Marshal(b, m, deterministic)
}
func (m *GetTransactionsByAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransactionsByAccountResponse.Merge(m, src)
}
func (m *GetTransactionsByAccountResponse) XXX_Size() int {
	return xxx_messageInfo_GetTransactionsByAccountResponse.Size(m)
}
func (m *GetTransactionsByAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransactionsByAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransactionsByAccountResponse proto.InternalMessageInfo

func (m *GetTransactionsByAccountResponse) GetResult() []*Transaction {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *GetTransactionsByAccountResponse) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

func (m *GetTransactionsByAccountResponse) GetLastRunningBalance() *types.Amount {
	if m != nil {
		return m.LastRunningBalance
	}
	return nil
}

// CreateTransactionRequest is the request message for creating a transaction.
//Only one of SourceOfflineUser and DestinationOfflineUser can be used to create a transaction.
type CreateTransactionRequest struct {
	// SourceAccountID is the identifier of the account emitting the transaction.
	SourceAccountID string `protobuf:"bytes,1,opt,name=SourceAccountID,json=source_account_id,proto3" json:"SourceAccountID,omitempty"`
	// SourceOfflineUser is the contact information for an offline user.
	SourceOfflineUser *types.OfflineUserInfo `protobuf:"bytes,5,opt,name=SourceOfflineUser,json=source_offline_user,proto3" json:"SourceOfflineUser,omitempty"`
	// DestinationAccount is the account receiving the transaction.
	DestinationAccount *BankAccountInfo `protobuf:"bytes,2,opt,name=DestinationAccount,json=destination_account,proto3" json:"DestinationAccount,omitempty"`
	// DestinationOfflineUser is the contact information for an offline user.
	DestinationOfflineUser *types.OfflineUserInfo `protobuf:"bytes,6,opt,name=DestinationOfflineUser,json=destination_offline_user,proto3" json:"DestinationOfflineUser,omitempty"`
	// Amount holds the amount value and currency of the transaction.
	Amount *types.Amount `protobuf:"bytes,3,opt,name=Amount,json=amount,proto3" json:"Amount,omitempty"`
	// Remarks is an informational note about the transaction.
	Remarks              string   `protobuf:"bytes,4,opt,name=Remarks,json=remarks,proto3" json:"Remarks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTransactionRequest) Reset()         { *m = CreateTransactionRequest{} }
func (m *CreateTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTransactionRequest) ProtoMessage()    {}
func (*CreateTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bfcd2b6d09f78a1, []int{7}
}

func (m *CreateTransactionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateTransactionRequest.Unmarshal(m, b)
}
func (m *CreateTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateTransactionRequest.Marshal(b, m, deterministic)
}
func (m *CreateTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTransactionRequest.Merge(m, src)
}
func (m *CreateTransactionRequest) XXX_Size() int {
	return xxx_messageInfo_CreateTransactionRequest.Size(m)
}
func (m *CreateTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTransactionRequest proto.InternalMessageInfo

func (m *CreateTransactionRequest) GetSourceAccountID() string {
	if m != nil {
		return m.SourceAccountID
	}
	return ""
}

func (m *CreateTransactionRequest) GetSourceOfflineUser() *types.OfflineUserInfo {
	if m != nil {
		return m.SourceOfflineUser
	}
	return nil
}

func (m *CreateTransactionRequest) GetDestinationAccount() *BankAccountInfo {
	if m != nil {
		return m.DestinationAccount
	}
	return nil
}

func (m *CreateTransactionRequest) GetDestinationOfflineUser() *types.OfflineUserInfo {
	if m != nil {
		return m.DestinationOfflineUser
	}
	return nil
}

func (m *CreateTransactionRequest) GetAmount() *types.Amount {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *CreateTransactionRequest) GetRemarks() string {
	if m != nil {
		return m.Remarks
	}
	return ""
}

// CreateTransactionResponse is the response message for a transaction creation.
type CreateTransactionResponse struct {
	// TransactionID is the unique identifier of a transaction.
	TransactionID string `protobuf:"bytes,1,opt,name=TransactionID,json=transaction_id,proto3" json:"TransactionID,omitempty"`
	// CreatedAt is the transaction created date.
	CratedAt             string   `protobuf:"bytes,2,opt,name=CratedAt,json=created_at,proto3" json:"CratedAt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTransactionResponse) Reset()         { *m = CreateTransactionResponse{} }
func (m *CreateTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*CreateTransactionResponse) ProtoMessage()    {}
func (*CreateTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bfcd2b6d09f78a1, []int{8}
}

func (m *CreateTransactionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateTransactionResponse.Unmarshal(m, b)
}
func (m *CreateTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateTransactionResponse.Marshal(b, m, deterministic)
}
func (m *CreateTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTransactionResponse.Merge(m, src)
}
func (m *CreateTransactionResponse) XXX_Size() int {
	return xxx_messageInfo_CreateTransactionResponse.Size(m)
}
func (m *CreateTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTransactionResponse proto.InternalMessageInfo

func (m *CreateTransactionResponse) GetTransactionID() string {
	if m != nil {
		return m.TransactionID
	}
	return ""
}

func (m *CreateTransactionResponse) GetCratedAt() string {
	if m != nil {
		return m.CratedAt
	}
	return ""
}

// ApprovePaymentRequest is the request message to approve a pending transaction.
type ApprovePaymentRequest struct {
	// TransactionID is the transaction unique identifier.
	TransactionID string `protobuf:"bytes,1,opt,name=TransactionID,json=transaction_id,proto3" json:"TransactionID,omitempty"`
	// Approve is Boolean value of approval action.
	Approve bool `protobuf:"varint,2,opt,name=Approve,json=approve,proto3" json:"Approve,omitempty"`
	// TFAType is type to receive OTP authentication code.
	TFAType              TFAType  `protobuf:"varint,3,opt,name=TFAType,json=tfa_type,proto3,enum=transactions.TFAType" json:"TFAType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApprovePaymentRequest) Reset()         { *m = ApprovePaymentRequest{} }
func (m *ApprovePaymentRequest) String() string { return proto.CompactTextString(m) }
func (*ApprovePaymentRequest) ProtoMessage()    {}
func (*ApprovePaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bfcd2b6d09f78a1, []int{9}
}

func (m *ApprovePaymentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApprovePaymentRequest.Unmarshal(m, b)
}
func (m *ApprovePaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApprovePaymentRequest.Marshal(b, m, deterministic)
}
func (m *ApprovePaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApprovePaymentRequest.Merge(m, src)
}
func (m *ApprovePaymentRequest) XXX_Size() int {
	return xxx_messageInfo_ApprovePaymentRequest.Size(m)
}
func (m *ApprovePaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApprovePaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApprovePaymentRequest proto.InternalMessageInfo

func (m *ApprovePaymentRequest) GetTransactionID() string {
	if m != nil {
		return m.TransactionID
	}
	return ""
}

func (m *ApprovePaymentRequest) GetApprove() bool {
	if m != nil {
		return m.Approve
	}
	return false
}

func (m *ApprovePaymentRequest) GetTFAType() TFAType {
	if m != nil {
		return m.TFAType
	}
	return TFAType__
}

// ApprovePaymentResponse is the response message for approving a pending transaction.
type ApprovePaymentResponse struct {
	// AuthorizationID is the executable code is obtained from
	//the payment feedback result
	AuthorizationID string `protobuf:"bytes,1,opt,name=AuthorizationID,json=authorization_id,proto3" json:"AuthorizationID,omitempty"`
	// SMSCode is the OTP code used for testing.
	SMSCode              int64    `protobuf:"varint,2,opt,name=SMSCode,json=sms_code,proto3" json:"SMSCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApprovePaymentResponse) Reset()         { *m = ApprovePaymentResponse{} }
func (m *ApprovePaymentResponse) String() string { return proto.CompactTextString(m) }
func (*ApprovePaymentResponse) ProtoMessage()    {}
func (*ApprovePaymentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bfcd2b6d09f78a1, []int{10}
}

func (m *ApprovePaymentResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApprovePaymentResponse.Unmarshal(m, b)
}
func (m *ApprovePaymentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApprovePaymentResponse.Marshal(b, m, deterministic)
}
func (m *ApprovePaymentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApprovePaymentResponse.Merge(m, src)
}
func (m *ApprovePaymentResponse) XXX_Size() int {
	return xxx_messageInfo_ApprovePaymentResponse.Size(m)
}
func (m *ApprovePaymentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ApprovePaymentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ApprovePaymentResponse proto.InternalMessageInfo

func (m *ApprovePaymentResponse) GetAuthorizationID() string {
	if m != nil {
		return m.AuthorizationID
	}
	return ""
}

func (m *ApprovePaymentResponse) GetSMSCode() int64 {
	if m != nil {
		return m.SMSCode
	}
	return 0
}

// TFARequest is request message for conducting 2FA.
type TFARequest struct {
	// TransactionID is transaction / payment identification code requires approval.
	TransactionID string `protobuf:"bytes,1,opt,name=TransactionID,json=transaction_id,proto3" json:"TransactionID,omitempty"`
	// Code is 2-digit authentication code is sent via SMS.
	Code string `protobuf:"bytes,2,opt,name=Code,json=code,proto3" json:"Code,omitempty"`
	// AuthorizationID is the executable code is obtained from the payment feedback result.
	AuthorizationID string `protobuf:"bytes,3,opt,name=AuthorizationID,json=authorization_id,proto3" json:"AuthorizationID,omitempty"`
	// TFAType is type to receive OTP authentication code.
	TFAType              TFAType  `protobuf:"varint,4,opt,name=TFAType,json=tfa_type,proto3,enum=transactions.TFAType" json:"TFAType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TFARequest) Reset()         { *m = TFARequest{} }
func (m *TFARequest) String() string { return proto.CompactTextString(m) }
func (*TFARequest) ProtoMessage()    {}
func (*TFARequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bfcd2b6d09f78a1, []int{11}
}

func (m *TFARequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TFARequest.Unmarshal(m, b)
}
func (m *TFARequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TFARequest.Marshal(b, m, deterministic)
}
func (m *TFARequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TFARequest.Merge(m, src)
}
func (m *TFARequest) XXX_Size() int {
	return xxx_messageInfo_TFARequest.Size(m)
}
func (m *TFARequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TFARequest.DiscardUnknown(m)
}

var xxx_messageInfo_TFARequest proto.InternalMessageInfo

func (m *TFARequest) GetTransactionID() string {
	if m != nil {
		return m.TransactionID
	}
	return ""
}

func (m *TFARequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *TFARequest) GetAuthorizationID() string {
	if m != nil {
		return m.AuthorizationID
	}
	return ""
}

func (m *TFARequest) GetTFAType() TFAType {
	if m != nil {
		return m.TFAType
	}
	return TFAType__
}

// TFAResponse is the response message for a 2FA request.
type TFAResponse struct {
	// TraceNumber is the transaction reference code.
	TraceNumber          string   `protobuf:"bytes,1,opt,name=TraceNumber,json=trace_number,proto3" json:"TraceNumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TFAResponse) Reset()         { *m = TFAResponse{} }
func (m *TFAResponse) String() string { return proto.CompactTextString(m) }
func (*TFAResponse) ProtoMessage()    {}
func (*TFAResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bfcd2b6d09f78a1, []int{12}
}

func (m *TFAResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TFAResponse.Unmarshal(m, b)
}
func (m *TFAResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TFAResponse.Marshal(b, m, deterministic)
}
func (m *TFAResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TFAResponse.Merge(m, src)
}
func (m *TFAResponse) XXX_Size() int {
	return xxx_messageInfo_TFAResponse.Size(m)
}
func (m *TFAResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TFAResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TFAResponse proto.InternalMessageInfo

func (m *TFAResponse) GetTraceNumber() string {
	if m != nil {
		return m.TraceNumber
	}
	return ""
}

func init() {
	proto.RegisterEnum("transactions.Type", Type_name, Type_value)
	proto.RegisterEnum("transactions.Status", Status_name, Status_value)
	proto.RegisterEnum("transactions.TFAType", TFAType_name, TFAType_value)
	proto.RegisterType((*Transaction)(nil), "transactions.Transaction")
	proto.RegisterType((*BankAccountInfo)(nil), "transactions.BankAccountInfo")
	proto.RegisterType((*GetTransactionRequest)(nil), "transactions.GetTransactionRequest")
	proto.RegisterType((*GetTransactionsRequest)(nil), "transactions.GetTransactionsRequest")
	proto.RegisterType((*GetTransactionsResponse)(nil), "transactions.GetTransactionsResponse")
	proto.RegisterType((*GetTransactionsByAccountRequest)(nil), "transactions.GetTransactionsByAccountRequest")
	proto.RegisterType((*GetTransactionsByAccountResponse)(nil), "transactions.GetTransactionsByAccountResponse")
	proto.RegisterType((*CreateTransactionRequest)(nil), "transactions.CreateTransactionRequest")
	proto.RegisterType((*CreateTransactionResponse)(nil), "transactions.CreateTransactionResponse")
	proto.RegisterType((*ApprovePaymentRequest)(nil), "transactions.ApprovePaymentRequest")
	proto.RegisterType((*ApprovePaymentResponse)(nil), "transactions.ApprovePaymentResponse")
	proto.RegisterType((*TFARequest)(nil), "transactions.TFARequest")
	proto.RegisterType((*TFAResponse)(nil), "transactions.TFAResponse")
}

func init() {
	proto.RegisterFile("github.com/openbank/openbank/v1/transaction/all.proto", fileDescriptor_1bfcd2b6d09f78a1)
}

var fileDescriptor_1bfcd2b6d09f78a1 = []byte{
	// 2326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x59, 0xcd, 0x6f, 0x1b, 0xc7,
	0x15, 0xe7, 0x2e, 0x29, 0x92, 0x1a, 0xc5, 0x16, 0x3d, 0xb6, 0x1c, 0x86, 0x68, 0x9c, 0xa9, 0x6c,
	0xd5, 0xb2, 0x60, 0x2d, 0x29, 0xda, 0x4e, 0x0b, 0x35, 0x1f, 0xa5, 0x24, 0x2b, 0x91, 0xfc, 0x25,
	0x90, 0x4a, 0xdd, 0xb8, 0x41, 0xd8, 0xe1, 0xee, 0x90, 0x5c, 0x8b, 0x9c, 0x61, 0x67, 0x66, 0x25,
	0xab, 0x41, 0x8a, 0xb4, 0x45, 0x01, 0x1f, 0x5a, 0x34, 0x50, 0x5b, 0xe4, 0xd6, 0x7f, 0xa0, 0x87,
	0xde, 0x8a, 0x5e, 0x5b, 0x14, 0xc8, 0xa5, 0x40, 0x0b, 0x34, 0x05, 0x72, 0x48, 0x2f, 0x41, 0xfb,
	0x07, 0x34, 0xa7, 0x9e, 0x8a, 0x62, 0x66, 0x97, 0xe4, 0x2e, 0x3f, 0xf4, 0x61, 0x27, 0x87, 0xa2,
	0x27, 0x7b, 0x67, 0xde, 0x7b, 0xfb, 0xe6, 0xf7, 0x7e, 0x6f, 0xde, 0x6f, 0x29, 0x70, 0xa3, 0xe1,
	0xca, 0xa6, 0x57, 0xb3, 0x6c, 0xd6, 0xce, 0xb3, 0x0e, 0xa1, 0x35, 0x4c, 0x77, 0xfa, 0xff, 0xd9,
	0x5d, 0xca, 0x4b, 0x8e, 0xa9, 0xc0, 0xb6, 0x74, 0x19, 0xcd, 0xe3, 0x56, 0xcb, 0xea, 0x70, 0x26,
	0x19, 0x7c, 0x26, 0xb4, 0x2c, 0x72, 0x2f, 0x34, 0x18, 0x6b, 0xb4, 0x48, 0x5e, 0xef, 0xd5, 0xbc,
	0x7a, 0x5e, 0xba, 0x6d, 0x22, 0x24, 0x6e, 0x77, 0x7c, 0xf3, 0xdc, 0x97, 0x02, 0x03, 0xdc, 0x71,
	0xf3, 0x98, 0x52, 0x26, 0xb1, 0x76, 0x0c, 0x76, 0xaf, 0xea, 0x7f, 0xec, 0xc5, 0x06, 0xa1, 0x8b,
	0x62, 0x0f, 0x37, 0x1a, 0x84, 0xe7, 0x59, 0x47, 0x5b, 0x8c, 0xb0, 0xce, 0x1f, 0x99, 0xf1, 0x7e,
	0x87, 0x88, 0x7e, 0xae, 0xb3, 0xff, 0x99, 0x00, 0x53, 0xdb, 0xfd, 0x74, 0xe1, 0x12, 0x38, 0x15,
	0x7a, 0xdc, 0x58, 0xcb, 0x1a, 0xc8, 0x98, 0x9f, 0x5c, 0x01, 0xe9, 0x58, 0x36, 0x36, 0x1f, 0x2b,
	0xc4, 0xb6, 0x62, 0xe5, 0xd3, 0xa1, 0xe3, 0x55, 0x5d, 0x07, 0x6e, 0x81, 0x53, 0x15, 0xe6, 0x71,
	0x9b, 0x94, 0x6c, 0x9b, 0x79, 0x54, 0x66, 0x4d, 0x64, 0xcc, 0x4f, 0x15, 0x9f, 0xb7, 0xc2, 0x30,
	0x58, 0x2b, 0x98, 0xee, 0x04, 0x06, 0x1b, 0xb4, 0xce, 0xa2, 0x11, 0x85, 0xf6, 0xaf, 0x62, 0x7f,
	0x1f, 0x96, 0xc1, 0x19, 0x3f, 0xe2, 0xbd, 0x7a, 0xbd, 0xe5, 0x52, 0xf2, 0x86, 0x20, 0x3c, 0x3b,
	0xa5, 0xa3, 0x9e, 0xb7, 0xf4, 0x09, 0xac, 0xd0, 0xce, 0x50, 0xb8, 0xb3, 0x41, 0x38, 0xe6, 0xdb,
	0x54, 0x3d, 0x41, 0x38, 0x7c, 0x00, 0xe0, 0x1a, 0x11, 0xd2, 0xa5, 0x1a, 0xaf, 0x6e, 0xaa, 0xf1,
	0x93, 0xa6, 0x7a, 0xd6, 0xe9, 0x07, 0xe9, 0xe5, 0xfb, 0x16, 0x38, 0x1f, 0x8a, 0x1d, 0x4e, 0xfa,
	0x99, 0x63, 0x27, 0x9d, 0x0d, 0x07, 0x8e, 0x64, 0xbe, 0x0c, 0x12, 0x6b, 0x58, 0x92, 0x6c, 0x42,
	0xc7, 0xca, 0x59, 0x3e, 0x5d, 0xac, 0x2e, 0x9f, 0xac, 0xed, 0x2e, 0x9f, 0x22, 0xf1, 0x12, 0x0e,
	0x96, 0x04, 0x16, 0x41, 0x62, 0x7b, 0xbf, 0x43, 0xb2, 0x13, 0xc8, 0x98, 0x3f, 0x5d, 0x84, 0xd1,
	0x73, 0xaa, 0x9d, 0xa8, 0x8f, 0x4a, 0x13, 0x7e, 0x0d, 0x24, 0x2b, 0x12, 0x4b, 0x4f, 0x64, 0x93,
	0xda, 0xeb, 0x5c, 0xd4, 0xcb, 0xdf, 0x8b, 0xf8, 0x25, 0x85, 0x5e, 0x83, 0x4b, 0x20, 0x59, 0x6a,
	0x6b, 0x5c, 0x53, 0x3a, 0xd7, 0x53, 0xc1, 0xb9, 0xfd, 0xc5, 0xa8, 0x0b, 0xd6, 0x6b, 0xf0, 0x2a,
	0x98, 0x5a, 0x23, 0xc2, 0xe6, 0xae, 0xa6, 0x74, 0x36, 0x3d, 0xc4, 0xb6, 0x29, 0xa7, 0xbf, 0x0d,
	0x2f, 0x82, 0xa4, 0x06, 0x6f, 0x2d, 0x3b, 0x39, 0x64, 0x98, 0x52, 0x60, 0x29, 0x3e, 0x5e, 0x02,
	0xa9, 0x32, 0x69, 0x63, 0xbe, 0x23, 0xb2, 0x60, 0xd8, 0x8a, 0xfb, 0x5b, 0xcb, 0xc9, 0x74, 0x2c,
	0x13, 0xcb, 0xc6, 0x66, 0xff, 0x66, 0x80, 0xe9, 0x81, 0x82, 0xc3, 0x2b, 0x60, 0xb2, 0xfb, 0x38,
	0xaa, 0x01, 0x40, 0x50, 0x77, 0xf5, 0xb2, 0xcb, 0x20, 0xad, 0xbc, 0x57, 0x99, 0x43, 0x34, 0xef,
	0xa3, 0x96, 0x93, 0xaa, 0xed, 0xaa, 0x36, 0x73, 0x88, 0x8a, 0x79, 0x6f, 0x8f, 0x12, 0x7e, 0x17,
	0xb7, 0x89, 0xa6, 0xdd, 0x40, 0x4c, 0xa6, 0x36, 0xab, 0x14, 0xb7, 0x09, 0xfc, 0x3a, 0x98, 0xbc,
	0x83, 0x1f, 0x32, 0xae, 0x2b, 0x97, 0xd0, 0x35, 0xc8, 0x04, 0x48, 0xf6, 0xd6, 0xa3, 0xce, 0x6d,
	0xb5, 0x5c, 0x55, 0x26, 0xbd, 0x73, 0x95, 0xc1, 0xcc, 0x6b, 0x44, 0x86, 0x7a, 0xb9, 0x4c, 0xbe,
	0xeb, 0x11, 0x21, 0x9f, 0xa0, 0xc3, 0x7b, 0x31, 0xff, 0x6c, 0x82, 0xf3, 0xd1, 0xa0, 0xa2, 0x1b,
	0x75, 0x15, 0xa4, 0xd7, 0x39, 0x6b, 0x6b, 0xa2, 0x1a, 0x27, 0x22, 0xea, 0x64, 0x9d, 0xb3, 0x76,
	0x55, 0xb3, 0xf5, 0x55, 0x90, 0xdc, 0x66, 0x3a, 0x84, 0x79, 0xa2, 0x10, 0x29, 0xc9, 0xfc, 0x00,
	0x1b, 0x60, 0x3a, 0x94, 0x9c, 0xc6, 0x2f, 0x7e, 0x2c, 0xe6, 0x67, 0xc2, 0x27, 0xd6, 0x5d, 0x80,
	0xc0, 0xc4, 0x6d, 0xb7, 0xed, 0x4a, 0x5d, 0x80, 0x28, 0x3c, 0x13, 0x2d, 0xb5, 0x01, 0x97, 0xc1,
	0x99, 0xbb, 0xe4, 0x91, 0xac, 0x48, 0xcc, 0xa5, 0x4b, 0x1b, 0x1b, 0xd4, 0x21, 0x8f, 0x74, 0xa3,
	0x45, 0xad, 0xcf, 0x52, 0xf2, 0x48, 0x56, 0x45, 0x60, 0x55, 0x75, 0x95, 0x59, 0x0f, 0xd1, 0x8f,
	0x0c, 0xf0, 0xec, 0x10, 0xa2, 0xa2, 0xc3, 0xa8, 0x20, 0xf0, 0x65, 0x90, 0x2c, 0x13, 0xe1, 0xb5,
	0x64, 0xd6, 0x40, 0xf1, 0xf9, 0xa9, 0xe2, 0x73, 0x03, 0x67, 0xe8, 0x3f, 0x44, 0x3b, 0x8b, 0x6b,
	0x27, 0x38, 0x07, 0x52, 0xaf, 0x63, 0x71, 0x87, 0x71, 0x1f, 0xcd, 0x74, 0xc4, 0x28, 0xdd, 0xc4,
	0xa2, 0xda, 0x66, 0x9c, 0xc0, 0x5b, 0x00, 0xde, 0xc6, 0x42, 0x96, 0x3d, 0x4a, 0x5d, 0xda, 0x58,
	0xc1, 0x2d, 0x4c, 0x6d, 0x12, 0xdc, 0x8b, 0x87, 0xf4, 0xef, 0xb9, 0x16, 0x16, 0xb2, 0xca, 0x7d,
	0xaf, 0x6a, 0xcd, 0x77, 0xeb, 0x1d, 0xeb, 0x47, 0x71, 0xf0, 0xc2, 0xc0, 0xb1, 0x56, 0xf6, 0x83,
	0x96, 0xea, 0x32, 0xe6, 0x04, 0x4d, 0x16, 0x26, 0x97, 0xf9, 0xf4, 0xe4, 0x8a, 0x7f, 0x6e, 0xe4,
	0x4a, 0x3c, 0x2d, 0xb9, 0x26, 0x4e, 0x44, 0xae, 0xe4, 0xc9, 0xc8, 0xf5, 0x77, 0x03, 0xa0, 0xf1,
	0x55, 0xf8, 0xdf, 0x67, 0xd9, 0xef, 0xe3, 0x20, 0xbb, 0xca, 0x09, 0x96, 0x64, 0xc4, 0x35, 0xf7,
	0x22, 0x98, 0x8e, 0xa8, 0x92, 0x91, 0x24, 0x3b, 0x13, 0x15, 0x1e, 0x8a, 0x6b, 0x23, 0xb5, 0xc7,
	0xc4, 0x17, 0xa1, 0x3d, 0xcc, 0x2f, 0x58, 0x7b, 0x24, 0x3f, 0x07, 0xed, 0xd1, 0x9f, 0xe8, 0xf1,
	0xe3, 0x4e, 0xf4, 0xd0, 0xf8, 0x4d, 0x1c, 0x3d, 0x7e, 0xdf, 0x33, 0xc0, 0x73, 0x23, 0x6a, 0x18,
	0x90, 0xf3, 0x09, 0xd4, 0xe8, 0x3c, 0x48, 0xaf, 0x72, 0x2c, 0x89, 0x53, 0x92, 0x23, 0x06, 0x32,
	0xb0, 0xf5, 0xbb, 0x9c, 0x2a, 0x96, 0xbd, 0x14, 0x7e, 0x6b, 0x80, 0x99, 0x52, 0xa7, 0xc3, 0xd9,
	0x2e, 0xd9, 0xc2, 0xfb, 0x6d, 0xd2, 0xbf, 0xa2, 0x9e, 0xe0, 0xf5, 0x97, 0x40, 0x2a, 0x88, 0x35,
	0xa2, 0x1f, 0x52, 0xd8, 0xdf, 0x82, 0x2f, 0x81, 0xd4, 0xf6, 0x7a, 0x29, 0x34, 0x9f, 0x66, 0x06,
	0xba, 0xce, 0xdf, 0x8c, 0x36, 0x93, 0xac, 0xe3, 0xe8, 0x88, 0xff, 0x3e, 0x38, 0x3f, 0x98, 0x77,
	0x80, 0xdb, 0x0d, 0x30, 0x5d, 0xf2, 0x64, 0x93, 0x71, 0xf7, 0x7b, 0x78, 0x6c, 0xea, 0x19, 0x1c,
	0x36, 0x51, 0xc9, 0xcf, 0x81, 0x54, 0xe5, 0x4e, 0xa5, 0xa7, 0x65, 0xe2, 0xd1, 0xf7, 0x8b, 0xb6,
	0xd0, 0x52, 0xa6, 0xf7, 0xfe, 0x4f, 0x0c, 0x00, 0xb6, 0xd7, 0x4b, 0x4f, 0x81, 0xd6, 0x05, 0x90,
	0x18, 0xa3, 0x9c, 0x12, 0x5a, 0x34, 0x8d, 0x38, 0x47, 0xfc, 0x18, 0xe7, 0x08, 0xc1, 0x9b, 0x78,
	0x72, 0x78, 0xd7, 0xc0, 0x94, 0x3e, 0x5d, 0x80, 0xe9, 0xa2, 0xfe, 0x50, 0xb2, 0xc9, 0x5d, 0xaf,
	0x5d, 0x23, 0x7c, 0xc4, 0xe1, 0xd4, 0x67, 0x9f, 0x4d, 0xaa, 0x54, 0xef, 0x77, 0xa3, 0x2c, 0xbc,
	0xe2, 0x2b, 0x70, 0x78, 0x16, 0x4c, 0xbd, 0x41, 0x77, 0x28, 0xdb, 0xd3, 0x93, 0x23, 0x13, 0xcb,
	0x99, 0xe9, 0x18, 0x3c, 0x0d, 0x92, 0xab, 0x9c, 0x38, 0xae, 0xcc, 0x18, 0xfa, 0xf9, 0x14, 0x98,
	0x58, 0x23, 0x35, 0x57, 0x66, 0x4c, 0xf5, 0x98, 0x33, 0xb3, 0xb1, 0x85, 0xfb, 0x5d, 0x35, 0x0e,
	0x67, 0xc0, 0xa9, 0x20, 0x82, 0xbf, 0x10, 0xc4, 0x98, 0x06, 0xa9, 0x8a, 0x67, 0xdb, 0x44, 0x88,
	0x20, 0xc8, 0x34, 0x48, 0x6d, 0x11, 0xea, 0xb8, 0xb4, 0xe1, 0x87, 0x81, 0x19, 0x90, 0x2e, 0x93,
	0x87, 0xc4, 0x96, 0xc4, 0xc9, 0xc4, 0x7b, 0x81, 0x5f, 0xec, 0x81, 0x04, 0x27, 0x81, 0x51, 0x0d,
	0xa2, 0x4d, 0x81, 0x78, 0xe5, 0x4e, 0xa5, 0x1f, 0xa9, 0x52, 0x5a, 0xbf, 0x79, 0xeb, 0xe6, 0x9b,
	0xfd, 0x84, 0x8a, 0x1f, 0x9e, 0x03, 0x30, 0x54, 0xe7, 0x0a, 0xe1, 0xbb, 0xae, 0x4d, 0xe0, 0xaf,
	0xe2, 0xe0, 0x74, 0x74, 0xd8, 0xc0, 0x8b, 0x51, 0xd4, 0x47, 0xca, 0xd1, 0xdc, 0xf8, 0x79, 0x33,
	0xfb, 0xa1, 0x79, 0x50, 0xfa, 0xa5, 0x19, 0xfd, 0x3e, 0x3d, 0x5f, 0x26, 0x92, 0xbb, 0x64, 0x97,
	0x20, 0x8c, 0x42, 0x8e, 0xb9, 0x4a, 0x77, 0x5d, 0x20, 0xdc, 0x6a, 0x21, 0x07, 0x4b, 0x8c, 0xd4,
	0xec, 0x8f, 0x9a, 0x5d, 0x45, 0x82, 0xb4, 0x34, 0x10, 0xa8, 0xb6, 0x8f, 0x64, 0x93, 0xa0, 0x28,
	0x21, 0xd1, 0x3e, 0xf3, 0x90, 0xf0, 0x3a, 0x9d, 0x96, 0x4b, 0x1c, 0x6b, 0xb3, 0x0c, 0xe2, 0xc5,
	0x42, 0x01, 0xde, 0x02, 0x17, 0x82, 0x6c, 0x11, 0x79, 0x44, 0x6c, 0x4f, 0xb9, 0x0b, 0x1f, 0xf2,
	0xba, 0xd7, 0x6a, 0xed, 0x5b, 0xf0, 0x0a, 0xb8, 0x9c, 0x9b, 0xbb, 0x98, 0x77, 0x48, 0xdd, 0xa5,
	0xae, 0xff, 0x6d, 0x1e, 0x3e, 0x55, 0xe8, 0x00, 0x9b, 0x4b, 0x20, 0x7e, 0xbd, 0x70, 0x1d, 0x2e,
	0x80, 0xf9, 0x32, 0x91, 0x1e, 0xa7, 0xc4, 0x41, 0x7b, 0x4d, 0x42, 0x75, 0x32, 0x9c, 0xf8, 0xd3,
	0x03, 0xb9, 0x02, 0x51, 0x26, 0x51, 0x9d, 0x79, 0xd4, 0xb1, 0x6a, 0x10, 0x64, 0x40, 0xf2, 0x9e,
	0x6a, 0x84, 0x22, 0x4c, 0x82, 0x44, 0x99, 0x60, 0xe7, 0x87, 0x7f, 0xfd, 0xc7, 0xcf, 0xcd, 0x59,
	0x88, 0x06, 0x7e, 0x84, 0x10, 0xf9, 0x77, 0x22, 0x2d, 0xf8, 0xee, 0x63, 0x33, 0xf6, 0xbe, 0xa9,
	0x09, 0x0a, 0x7f, 0x91, 0x00, 0xd3, 0x03, 0x6a, 0x00, 0x5e, 0x3a, 0xac, 0x42, 0x5d, 0x6d, 0x9f,
	0x9b, 0x3b, 0xc2, 0xca, 0x6f, 0x90, 0xd9, 0xdf, 0xc4, 0x0f, 0x4a, 0x3f, 0x8d, 0x47, 0xcb, 0x35,
	0x73, 0xdb, 0x15, 0x52, 0x57, 0x24, 0xf2, 0x9b, 0xc8, 0x67, 0x86, 0x7f, 0x78, 0x81, 0x30, 0x6a,
	0x29, 0x0b, 0x9b, 0x51, 0x89, 0x5d, 0x35, 0xe5, 0x91, 0xd7, 0x41, 0x92, 0xa1, 0x62, 0x21, 0xe2,
	0x61, 0xa1, 0x37, 0x99, 0x87, 0x6c, 0x4c, 0x51, 0x07, 0x37, 0xd4, 0xa4, 0x22, 0x48, 0x36, 0x39,
	0xf3, 0x1a, 0xcd, 0x88, 0x99, 0xaa, 0xaa, 0x2e, 0xdf, 0xbe, 0x8a, 0x34, 0x42, 0x1b, 0x21, 0x97,
	0xaa, 0x1a, 0x73, 0x24, 0xbc, 0x9a, 0x50, 0xc7, 0xa3, 0x52, 0x20, 0x1b, 0xb7, 0x5a, 0xc2, 0x1a,
	0x69, 0x1e, 0xe4, 0x25, 0x46, 0x71, 0x85, 0xd5, 0xf5, 0xaa, 0x92, 0x28, 0x63, 0xb6, 0x6c, 0x8f,
	0x73, 0x42, 0xa5, 0xca, 0x99, 0x58, 0x9b, 0x6f, 0xfb, 0x6c, 0xba, 0x7f, 0x24, 0x9b, 0x6e, 0x80,
	0x6b, 0xb9, 0xa5, 0xf1, 0x6c, 0x1a, 0x83, 0xff, 0x58, 0x9a, 0x40, 0x98, 0x19, 0xa4, 0x49, 0x88,
	0x16, 0x9f, 0x26, 0x40, 0x76, 0x9c, 0x48, 0x84, 0x8b, 0x87, 0x56, 0x7e, 0x50, 0xd2, 0xe7, 0xac,
	0xe3, 0x9a, 0x07, 0x8c, 0xf9, 0x34, 0x7e, 0x50, 0xfa, 0xf5, 0x00, 0x63, 0x16, 0x46, 0x32, 0x06,
	0xd5, 0x19, 0x47, 0x0d, 0x77, 0x97, 0x50, 0x14, 0x08, 0x1f, 0xe4, 0x3a, 0xff, 0x9f, 0x34, 0x6a,
	0xf8, 0x34, 0xfa, 0xce, 0x91, 0x34, 0x7a, 0x05, 0xbc, 0x94, 0x5b, 0x3e, 0x36, 0x8d, 0x86, 0xaa,
	0x33, 0x96, 0x4f, 0x97, 0xe1, 0x9c, 0xe2, 0x53, 0x50, 0x07, 0x91, 0x7f, 0xa7, 0xa7, 0xb0, 0xdf,
	0x1d, 0x47, 0xb2, 0x4f, 0x4c, 0x70, 0x66, 0x48, 0xe5, 0xc1, 0xaf, 0x44, 0xe9, 0x32, 0x4e, 0xca,
	0xe7, 0x2e, 0x1f, 0x69, 0x17, 0xf0, 0xe9, 0x5f, 0xc6, 0x41, 0xe9, 0x4f, 0x46, 0x94, 0x4f, 0xe7,
	0x7c, 0xf3, 0x81, 0x71, 0xb1, 0xe8, 0xaf, 0x2a, 0xe2, 0x50, 0xb2, 0x17, 0xde, 0x42, 0x98, 0x3a,
	0x88, 0x07, 0xb4, 0x72, 0xa5, 0x40, 0xae, 0x63, 0x6d, 0xda, 0x0a, 0xf3, 0x25, 0xf8, 0x16, 0xf8,
	0x72, 0x28, 0x34, 0x0a, 0xb4, 0xe4, 0x00, 0xec, 0x5f, 0x05, 0x37, 0x72, 0xd7, 0xc6, 0xc3, 0x3e,
	0x36, 0xfb, 0xda, 0x59, 0x70, 0xa6, 0x87, 0x77, 0x0a, 0x4c, 0xdc, 0xe7, 0xae, 0x24, 0x1a, 0xf0,
	0x99, 0x65, 0x63, 0x61, 0xf6, 0xb0, 0x1e, 0xfe, 0xc8, 0x04, 0xa7, 0xa3, 0x4a, 0x70, 0x70, 0xf6,
	0x8e, 0xd4, 0xb7, 0xb9, 0x4b, 0x87, 0x1b, 0x05, 0xa8, 0x7e, 0x66, 0x1c, 0x94, 0xfe, 0x38, 0x80,
	0xea, 0xf3, 0x81, 0x2d, 0xc2, 0xa8, 0xe3, 0x6b, 0x8d, 0x08, 0xbc, 0x17, 0x0e, 0xdd, 0xb6, 0x36,
	0xb1, 0xcf, 0xe1, 0x07, 0x60, 0x36, 0x8c, 0x67, 0x18, 0x47, 0x14, 0x48, 0x65, 0xc7, 0x82, 0xd7,
	0x41, 0x31, 0x57, 0x18, 0x0f, 0xe8, 0xe8, 0xac, 0xc7, 0xa3, 0x79, 0x41, 0xa1, 0xf9, 0xdc, 0xd0,
	0xe0, 0xf4, 0xdf, 0x87, 0x5b, 0x21, 0x58, 0x3f, 0x36, 0x41, 0x7c, 0x7b, 0xbd, 0x04, 0xb3, 0x43,
	0xea, 0x71, 0x9c, 0x78, 0xe9, 0xcb, 0xc5, 0xd9, 0x0f, 0xcc, 0x83, 0xd2, 0x3f, 0x07, 0x50, 0x43,
	0x5d, 0x31, 0x3b, 0x40, 0x47, 0xb4, 0xe7, 0xca, 0x26, 0x2a, 0xae, 0x97, 0x72, 0xe5, 0x88, 0xdc,
	0x55, 0xd7, 0x20, 0xdb, 0x13, 0x41, 0x83, 0xab, 0x05, 0x75, 0x23, 0x84, 0x2f, 0x2a, 0xdf, 0x71,
	0xb1, 0x8e, 0x6d, 0xc9, 0x38, 0x52, 0x42, 0x98, 0x50, 0xe9, 0xda, 0xbe, 0xf7, 0x7c, 0x71, 0xbd,
	0x74, 0xc5, 0xda, 0xbc, 0xe5, 0x83, 0xbd, 0x06, 0x9e, 0x0d, 0x83, 0xdd, 0x15, 0xcd, 0x0a, 0xe1,
	0xa3, 0xe4, 0x4b, 0xff, 0x58, 0xe3, 0x61, 0x9d, 0x55, 0xb0, 0x3e, 0x3f, 0x04, 0xab, 0xcd, 0x68,
	0xdd, 0xe5, 0x6d, 0x9d, 0x50, 0x1f, 0xda, 0x5c, 0xfc, 0xb1, 0x19, 0x5b, 0xf9, 0x43, 0xf2, 0xa0,
	0xf4, 0x41, 0x12, 0xc4, 0x8b, 0x56, 0x01, 0x7e, 0x1b, 0x64, 0xc2, 0xb7, 0x11, 0x2a, 0x6d, 0x6d,
	0xc0, 0x6f, 0x6c, 0x71, 0xb6, 0xeb, 0x3a, 0x44, 0x04, 0x9d, 0x16, 0xb4, 0x26, 0x76, 0x10, 0xeb,
	0x10, 0xee, 0xff, 0xdd, 0x03, 0x31, 0x3a, 0x78, 0xa9, 0xf6, 0x64, 0x94, 0x55, 0x9c, 0x58, 0xb2,
	0x0a, 0x56, 0x61, 0xc1, 0x30, 0x8b, 0x19, 0xac, 0x44, 0x9d, 0x0f, 0x4c, 0xfe, 0xa1, 0x60, 0x74,
	0x79, 0x68, 0xa5, 0x7c, 0x5b, 0x49, 0xb3, 0x25, 0x78, 0x13, 0xac, 0x8e, 0x92, 0x66, 0xfe, 0x5d,
	0xeb, 0x30, 0xe2, 0x6b, 0xb3, 0xc8, 0x95, 0xae, 0xbe, 0x95, 0x2f, 0xeb, 0x34, 0x1d, 0x85, 0x3f,
	0x6e, 0x09, 0xab, 0xbc, 0xa5, 0xa2, 0x5d, 0x83, 0x1b, 0xe0, 0xb5, 0xe1, 0x68, 0xca, 0xbe, 0x1f,
	0xaa, 0x89, 0x77, 0x09, 0xea, 0x10, 0xde, 0x76, 0x85, 0x50, 0xf9, 0x4b, 0xa6, 0x86, 0x1c, 0x11,
	0x22, 0x22, 0x0a, 0xad, 0xf2, 0xc9, 0xa5, 0x63, 0x79, 0x1d, 0xc4, 0x6f, 0x14, 0x0a, 0xf0, 0x55,
	0xf0, 0x72, 0xd4, 0x05, 0x53, 0xe4, 0x51, 0xf2, 0xa8, 0xe3, 0x6b, 0x61, 0xc2, 0x39, 0xe3, 0x88,
	0xd9, 0xb6, 0xc7, 0x89, 0xd3, 0x45, 0x54, 0x10, 0xbe, 0x4b, 0x38, 0x12, 0xae, 0x43, 0xac, 0x72,
	0x55, 0xbd, 0xba, 0x00, 0xbf, 0x05, 0xbe, 0x39, 0x1e, 0x9a, 0x1a, 0x73, 0xf6, 0xd5, 0xeb, 0xdb,
	0xb8, 0x55, 0x67, 0xaa, 0xe4, 0x2a, 0x34, 0x0b, 0x9d, 0xb3, 0x8d, 0xa5, 0xdd, 0xd4, 0x2e, 0xbd,
	0x37, 0x07, 0xbe, 0xd6, 0x83, 0x9f, 0x99, 0xe0, 0x27, 0x66, 0x8f, 0x59, 0x3f, 0x30, 0xd3, 0x71,
	0xf8, 0x63, 0xa3, 0x14, 0xa0, 0xc0, 0x46, 0x96, 0x57, 0xa8, 0x97, 0x71, 0x22, 0x24, 0x77, 0x75,
	0x2c, 0x05, 0x5b, 0xbf, 0x01, 0x88, 0xa3, 0x51, 0x16, 0x16, 0xda, 0x6e, 0x92, 0xc1, 0xce, 0xe8,
	0x70, 0xa6, 0x23, 0xd7, 0x99, 0xdf, 0x60, 0x2a, 0xa7, 0x68, 0xe7, 0xa9, 0xcf, 0x52, 0x54, 0x6f,
	0xb1, 0x3d, 0x6b, 0x3e, 0x51, 0x4c, 0xeb, 0x79, 0xe7, 0xc9, 0xe6, 0xf2, 0xa4, 0x26, 0x38, 0xdb,
	0x21, 0x74, 0xe5, 0x6d, 0x70, 0xd5, 0x1f, 0x8a, 0xf0, 0x52, 0x53, 0xca, 0x8e, 0x58, 0xce, 0x6b,
	0x13, 0xab, 0x46, 0x77, 0x2c, 0xc9, 0xc2, 0x5d, 0x60, 0x29, 0xce, 0x02, 0x2b, 0xe8, 0x16, 0x38,
	0x77, 0x94, 0xf9, 0x9e, 0x32, 0x7b, 0xdd, 0xd8, 0x8a, 0x3d, 0x88, 0xfc, 0x25, 0xf1, 0x3d, 0x23,
	0xf6, 0xd8, 0x88, 0xbd, 0x6f, 0xc4, 0x7e, 0x67, 0xc4, 0x3e, 0x36, 0x62, 0xff, 0x36, 0x62, 0x7f,
	0x31, 0x63, 0xb5, 0xa4, 0xfe, 0xf9, 0xf2, 0xda, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x54, 0x12,
	0x16, 0x65, 0xac, 0x1c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TransactionServiceClient is the client API for TransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransactionServiceClient interface {
	// GetTransaction retrieves the detail of a transaction, selected by its id.
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*Transaction, error)
	// GetTransactions returns a list containing up to 20 transactions.
	GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error)
	// GetTransactionsByAccount returns a list containing up to 20 transactions.
	GetTransactionsByAccount(ctx context.Context, in *GetTransactionsByAccountRequest, opts ...grpc.CallOption) (*GetTransactionsByAccountResponse, error)
	// CreateTransaction creates a new transaction and returns its id.
	CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error)
	// ApprovePayment approves a pending transaction.
	ApprovePayment(ctx context.Context, in *ApprovePaymentRequest, opts ...grpc.CallOption) (*ApprovePaymentResponse, error)
	// TFA does 2FA verification for an approved transaction.
	TFA(ctx context.Context, in *TFARequest, opts ...grpc.CallOption) (*TFAResponse, error)
}

type transactionServiceClient struct {
	cc *grpc.ClientConn
}

func NewTransactionServiceClient(cc *grpc.ClientConn) TransactionServiceClient {
	return &transactionServiceClient{cc}
}

func (c *transactionServiceClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/transactions.TransactionService/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error) {
	out := new(GetTransactionsResponse)
	err := c.cc.Invoke(ctx, "/transactions.TransactionService/GetTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetTransactionsByAccount(ctx context.Context, in *GetTransactionsByAccountRequest, opts ...grpc.CallOption) (*GetTransactionsByAccountResponse, error) {
	out := new(GetTransactionsByAccountResponse)
	err := c.cc.Invoke(ctx, "/transactions.TransactionService/GetTransactionsByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error) {
	out := new(CreateTransactionResponse)
	err := c.cc.Invoke(ctx, "/transactions.TransactionService/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ApprovePayment(ctx context.Context, in *ApprovePaymentRequest, opts ...grpc.CallOption) (*ApprovePaymentResponse, error) {
	out := new(ApprovePaymentResponse)
	err := c.cc.Invoke(ctx, "/transactions.TransactionService/ApprovePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) TFA(ctx context.Context, in *TFARequest, opts ...grpc.CallOption) (*TFAResponse, error) {
	out := new(TFAResponse)
	err := c.cc.Invoke(ctx, "/transactions.TransactionService/TFA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionServiceServer is the server API for TransactionService service.
type TransactionServiceServer interface {
	// GetTransaction retrieves the detail of a transaction, selected by its id.
	GetTransaction(context.Context, *GetTransactionRequest) (*Transaction, error)
	// GetTransactions returns a list containing up to 20 transactions.
	GetTransactions(context.Context, *GetTransactionsRequest) (*GetTransactionsResponse, error)
	// GetTransactionsByAccount returns a list containing up to 20 transactions.
	GetTransactionsByAccount(context.Context, *GetTransactionsByAccountRequest) (*GetTransactionsByAccountResponse, error)
	// CreateTransaction creates a new transaction and returns its id.
	CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error)
	// ApprovePayment approves a pending transaction.
	ApprovePayment(context.Context, *ApprovePaymentRequest) (*ApprovePaymentResponse, error)
	// TFA does 2FA verification for an approved transaction.
	TFA(context.Context, *TFARequest) (*TFAResponse, error)
}

// UnimplementedTransactionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTransactionServiceServer struct {
}

func (*UnimplementedTransactionServiceServer) GetTransaction(ctx context.Context, req *GetTransactionRequest) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (*UnimplementedTransactionServiceServer) GetTransactions(ctx context.Context, req *GetTransactionsRequest) (*GetTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (*UnimplementedTransactionServiceServer) GetTransactionsByAccount(ctx context.Context, req *GetTransactionsByAccountRequest) (*GetTransactionsByAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsByAccount not implemented")
}
func (*UnimplementedTransactionServiceServer) CreateTransaction(ctx context.Context, req *CreateTransactionRequest) (*CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (*UnimplementedTransactionServiceServer) ApprovePayment(ctx context.Context, req *ApprovePaymentRequest) (*ApprovePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApprovePayment not implemented")
}
func (*UnimplementedTransactionServiceServer) TFA(ctx context.Context, req *TFARequest) (*TFAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TFA not implemented")
}

func RegisterTransactionServiceServer(s *grpc.Server, srv TransactionServiceServer) {
	s.RegisterService(&_TransactionService_serviceDesc, srv)
}

func _TransactionService_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactions.TransactionService/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactions.TransactionService/GetTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransactions(ctx, req.(*GetTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetTransactionsByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransactionsByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactions.TransactionService/GetTransactionsByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransactionsByAccount(ctx, req.(*GetTransactionsByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactions.TransactionService/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ApprovePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApprovePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ApprovePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactions.TransactionService/ApprovePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ApprovePayment(ctx, req.(*ApprovePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_TFA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TFARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).TFA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactions.TransactionService/TFA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).TFA(ctx, req.(*TFARequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TransactionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transactions.TransactionService",
	HandlerType: (*TransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransaction",
			Handler:    _TransactionService_GetTransaction_Handler,
		},
		{
			MethodName: "GetTransactions",
			Handler:    _TransactionService_GetTransactions_Handler,
		},
		{
			MethodName: "GetTransactionsByAccount",
			Handler:    _TransactionService_GetTransactionsByAccount_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _TransactionService_CreateTransaction_Handler,
		},
		{
			MethodName: "ApprovePayment",
			Handler:    _TransactionService_ApprovePayment_Handler,
		},
		{
			MethodName: "TFA",
			Handler:    _TransactionService_TFA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/openbank/openbank/v1/transaction/all.proto",
}
